--OB Categories--	Created by: Nicholas Parsons--	Created on: 5/10/20----	Copyright Â© 2020 Nicholas Parsons, All Rights Reserved--use AppleScript version "2.4" -- Yosemite (10.10) or lateruse scripting additionsuse script "SQLite Lib2"use script "Myriad Tables Lib"use OBUtility : script "OB Utilities"property name : "OB Categories"property id : "com.OpenBooksApp.OBCategories"property version : "1.1"property primaryBaseForAccountCategoryIDs : 1000on displayCategories for thisDB given tableName:tableName as text : "accounts", title:defaultTitle as text : "Categories", prompt:thePrompt as text : "Select a category.", editableColumns:editableColumns as list : {1}, columnHeader:columnHeader as text : "Category", initialPosition:initialPosition : missing value	try		doOBLog of OBUtility for "displayCategories handler called from OB Categories library" given logType:"debug"		set headerRow to {columnHeader, "ID"}		set columnFormats to {text, missing value}		set parentCategoryID to missing value		repeat			try				repeat					try -- because the following line will throw an error if there are no and can be no subcategories of this parent category						set tableData to getAccounts from thisDB given parentCategoryID:parentCategoryID, tableName:tableName					on error errorMessage number 1000 -- this parent category can have no subcategories						doOBLog of OBUtility for errorMessage & " Error number 1000" given logType:"error"						display alert errorMessage						set parentCategoryID to parentCategory for parentCategoryID given db:thisDB, tableName:tableName						set tableData to getAccounts from thisDB given parentCategoryID:parentCategoryID, tableName:tableName					end try					if parentCategoryID is missing value then						set itsTitle to defaultTitle						set cancelButtonName to "Done"					else						set itsTitle to defaultTitle & ": " & (categoryName for parentCategoryID given db:thisDB)						set cancelButtonName to "Back"					end if -- parentCategoryID is missing value					set theTable to make new table with data tableData with title itsTitle with prompt thePrompt column headings headerRow row template columnFormats editable columns editableColumns with empty selection allowed					modify table theTable OK button name "Select" cancel button name cancelButtonName extra button name "Add" initial position initialPosition										try						set theResult to display table theTable with extended results					on error number -128						if parentCategoryID is missing value then							doOBLog of OBUtility for "user cancelled" given logType:"debug"							error number -128						else							set parentCategoryID to parentCategory for parentCategoryID given db:thisDB, tableName:tableName							exit repeat						end if -- parentCategoryID is missing value					end try										set initialPosition to final position of theResult										if button number of theResult is 2 then -- user chose add						doOBLog of OBUtility for "user chose to add new category" given logType:"debug"						try							promptUserForNewCategoryName for tableName given db:thisDB, parentCategoryID:parentCategoryID						on error errorMessage number errorNumber							doOBLog of OBUtility for errorMessage & " Error number " & errorNumber given logType:"error"							display alert "Sorry, we were unable to add your new category" message errorMessage						end try						-- go back to the main menu											else if button number of theResult is 1 then						-- #todo: process any edits to the category names						-- display the subcategories for the selected category						if values selected of theResult is {} then							display alert "Nothing was selected"						else -- a category was selected							doOBLog of OBUtility for "user chose " & the first item of the first item of values selected of theResult given logType:"debug"							set parentCategoryID to the last item of the first item of values selected of theResult						end if -- no category was selected					end if -- button selected				end repeat			on error number -128				exit repeat			end try		end repeat	on error errorMessage number errorNumber		doOBLog of OBUtility for errorMessage & " Error number " & errorNumber given logType:"error"		error errorMessage number errorNumber	end try	return initialPositionend displayCategorieson chooseChildCategory from thisDB given tableName:tableName as text : "accounts", prompt:thePrompt as text : "Choose an account.", title:thisTitle as text : "Choose Account", OKButtonName:OKButtonName as text : "Choose", cancelButtonName:cancelButtonName as text : "Cancel", backButton:backButton as boolean : false, backButtonName:backButtonName as text : "Back", stepCount:theStep as integer : 0, initiallySelectedRows:initiallySelectedRows as list : {}, initialPosition:initialPosition : missing value	doOBLog of OBUtility for "chooseChildCategory handler called from OB Categories library" given logType:"debug"	set functionResult to {accountID:missing value, accountName:missing value, stepCount:theStep, userCancelled:false, userChoseBack:false, finalPosition:initialPosition}	set theData to getChildAccounts from thisDB given tableName:tableName	if initiallySelectedRows is not {} then set initiallySelectedRows to convertInitiallySelectedRows from initiallySelectedRows given tableData:theData	set headerRow to {"Account", "ID"}	set columnFormats to {text, missing value}	set theTable to make new table with data theData with title thisTitle with prompt thePrompt column headings headerRow row template columnFormats initially selected rows initiallySelectedRows with double click means OK	modify table theTable OK button name OKButtonName cancel button name cancelButtonName initial position initialPosition	if backButton then modify table theTable extra button name backButtonName		try		set theResult to display table theTable with extended results		if button number of theResult is 1 then			set accountName of functionResult to the first item of the first item of values selected of theResult			set accountID of functionResult to the last item of the first item of values selected of theResult			set stepCount of functionResult to (stepCount of functionResult) + 1			doOBLog of OBUtility for "user chose " & accountName of functionResult given logType:"debug"		else if button number of theResult is 2 then			doOBLog of OBUtility for "user chose back" given logType:"debug"			set userChoseBack of functionResult to true			set stepCount of functionResult to (stepCount of functionResult) - 1		end if		set finalPosition of functionResult to final position of theResult	on error number -128		doOBLog of OBUtility for "user cancelled" given logType:"debug"		set userCancelled of functionResult to true	end try	return functionResultend chooseChildCategoryon convertInitiallySelectedRows from thisList given tableData:tableData	(*
Myriad Tables Lib's make table command takes an initially selected rows parameter
but it is a list of integers representing the index of the row to be selected
whereas the input we have will be a list of integers representing the account ID to be selected
so we'll need to look at which row contains that account ID and return the index of that row
*)	(*
this is a really dumb, inefficient and non-scalable way of solving this problem
but for now it's all I got so let's see how it goes and come up with a better idea if and when we can
*)	doOBLog of OBUtility for "converting list of account IDs into a list of indexes" given logType:"debug"	set initiallySelectedRows to {}	repeat with i from 1 to count of tableData		-- tableData is a list of list where the second item (i.e. column 2) in each list item (i.e. row) is the account ID		if thisList contains item 2 of item i of tableData then set the end of initiallySelectedRows to i	end repeat	return initiallySelectedRowsend convertInitiallySelectedRowson chooseParentCategory from thisDB	set parentCategoryID to missing value	(*
basically use the displayAccounts handler
but return a record 
and if the selected category has no child categories, then that's the one that gets returned
but as the user won't know whether or not a category he/she is selecting has child categories, it will have to be a prompt after the fact
e.g. do you want to select/return this category or cancel/go back/create subcategory
if it does have child categories, then display those
*)end chooseParentCategoryon makeCategoriesTable for thisDB given tableName:tableName as text : "accounts"	doOBLog of OBUtility for "making new table for " & tableName given logType:"debug"	update db thisDB sql string "create table " & tableName & " (id integer primary key not null, name text not null, parent integer references " & tableName & "(id) on delete cascade)"end makeCategoriesTableon getAccounts from thisDB given parentCategoryID:parentCategoryID : missing value, tableName:tableName as text : "accounts"	doOBLog of OBUtility for "getting list of categories from " & tableName & " table where the parent category ID is " & parentCategoryID given logType:"debug"	(*
if parentCategoryID is missing value then we only want accounts whose parent is null
*)	if parentCategoryID is missing value then		set theData to query db thisDB sql string "select name, id from " & tableName & " where parent is null order by name asc"	else		set theData to query db thisDB sql string "select name, id from " & tableName & " where parent = " & parentCategoryID & " order by name asc"	end if	if theData is {} then set theData to {{}}	return theDataend getAccountson getChildAccounts from thisDB given tableName:tableName as text : "accounts"	doOBLog of OBUtility for "getting table data for all child accounts in the table " & tableName given logType:"debug"	set theData to query db thisDB sql string "select name, id from " & tableName & " where id not in (select parent from " & tableName & " where parent is not null) order by name asc"	if theData is {} then set theData to {{}}	return theDataend getChildAccountson listAllCategoryNames from thisTableName : "accounts" given db:thisDB, tableFormatting:tableFormatting as boolean : false	doOBLog of OBUtility for "getting list of all category names" given logType:"debug"	set theNames to query db thisDB sql string "select distinct name from " & thisTableName & " order by name asc"	-- that will have returned a list of lists	-- so theNames will be a list containing 0 or more lists each of which will contain one string item being the name	if not tableFormatting and theNames is not {} then		set theNames to extract column 1 from theNames		doOBLog of OBUtility for "converted the list of accounts/categories/names into a single list" given logType:"debug"	end if	return theNamesend listAllCategoryNameson listChildCategoryNames from thisTableName : "accounts" given db:thisDB, tableFormatting:tableFormatting as boolean : false, sortMethod:sortString as string : "name asc"	doOBLog of OBUtility for "getting list of names of all categories that do not have children" given logType:"debug"	(*
we want the name for each row where the id of that row does not appear at all in the parent column i.e. does not appear in any row in the parent column
*)	set theNames to query db thisDB sql string "select distinct name from " & thisTableName & " where id not in (select parent from " & thisTableName & " where parent is not null) order by " & sortString	if theNames is {} then		doOBLog of OBUtility for "no child account/categories found" given logType:"debug"	else if not tableFormatting then		set theNames to extract column 1 from theNames		doOBLog of OBUtility for "converted the list of accounts/categories/names into a single list" given logType:"debug"	end if	return theNamesend listChildCategoryNameson listParentIDs from thisTableName given db:thisDB	doOBLog of OBUtility for "getting list of all the IDs from the parent column of the " & thisTableName & " table" given logType:"debug"	set theIDs to query db thisDB sql string "select distinct parent from " & thisTableName & " order by parent desc"	if theIDs is not {} then set theIDs to extract column 1 from theIDs	return theIDsend listParentIDson promptUserForNewCategoryName for thisTableName as text : "accounts" given db:thisDB, parentCategoryID:parentCategoryID	doOBLog of OBUtility for "prompting user to add a new category to " & thisTableName & " where the parent category ID is " & parentCategoryID given logType:"debug"	set theResult to returnOBValue of OBUtility without backButton given prompt:"Enter the new category name.", title:"New Category"	if userCancelled of theResult then return false	set itsName to valueReturned of theResult	-- #todo: escape itsName for sql	addCategory to thisDB for thisTableName given parentCategoryID:parentCategoryID, itsName:itsNameend promptUserForNewCategoryNameon addCategory to thisDB for thisTableName as text : "accounts" given parentCategoryID:parentCategoryID, itsName:itsName as text, forcedUniqueness:forcedUniqueness as boolean : true	doOBLog of OBUtility for "adding a new category called " & itsName & " to the " & thisTableName & " table with a parent category ID of " & parentCategoryID given logType:"debug"	-- test to see if itsName is unique 	if forcedUniqueness then		set itsUnique to nameIsUnique for thisDB given nameToTest:itsName, tableName:thisTableName		if itsUnique then			doOBLog of OBUtility for "the name is unique" given logType:"debug"		else			error "There is already an account/category with the name â" & itsName & "â." number 1000		end if -- it's unique	end if -- forcedUniqueness	set itsName to escapeStringForSQL(itsName)	if parentCategoryID is missing value then		update db thisDB sql string "insert into " & thisTableName & " (name) values ('" & itsName & "')"	else		update db thisDB sql string "insert into " & thisTableName & " (name, parent) values ('" & itsName & "', " & parentCategoryID & ")"	end if	doOBLog of OBUtility for "row added" given logType:"audit"end addCategoryon nameIsUnique for thisDB given nameToTest:nameToTest, tableName:tableName as text : "accounts"	doOBLog of OBUtility for "testing to see if the database already contains an account/category in the " & tableName & " table with the name " & nameToTest given logType:"debug"	set nameToTest to escapeStringForSQL(nameToTest)	set theResult to query db thisDB sql string "select * from " & tableName & " where name = '" & nameToTest & "'"	return theResult is {}end nameIsUniqueon categoryName for thisID given db:thisDB, tableName:tableName as text : "accounts"	doOBLog of OBUtility for "getting the name of the category whose ID is " & thisID given logType:"debug"	set theName to query db thisDB sql string "select name from " & tableName & " where id = " & thisID	if theName is {} then error "Could not find an account that had an ID of " & thisID & "." number 1000	return the first item of the first item of theNameend categoryNameon categoryID for thisName given db:thisDB, tableName:tableName as text : "accounts"	doOBLog of OBUtility for "getting the ID of the account/category whose name is " & thisName given logType:"debug"	set escapedName to escapeStringForSQL(thisName)	set theID to query db thisDB sql string "select id from " & tableName & " where name = '" & escapedName & "'"	if theID is {} then error "Could not find an account that had a name of " & thisName & "." number 1000	return the first item of the first item of theIDend categoryIDon parentCategory for parentCategoryID given db:thisDB, tableName:tableName as text : "accounts"	doOBLog of OBUtility for "getting the parent account/category for the account/category with the ID of " & parentCategoryID & " in the " & tableName & " table" given logType:"debug"	set theID to query db thisDB sql string "select parent from " & tableName & " where id = " & parentCategoryID	if theID is {} then		set theID to missing value	else		set theID to the first item of the first item of theID	end if	return theIDend parentCategoryon escapeStringForSQL(thisString)	doOBLog of OBUtility for "escaping the given string for valid sql compatability (string concealed for security)" given logType:"debug"	set escapedString to ""	repeat with theCharacter in characters of thisString		set theCharacter to theCharacter as text		if theCharacter is "'" then			set escapedString to escapedString & "'" & theCharacter		else			set escapedString to escapedString & theCharacter		end if	end repeat	return escapedStringend escapeStringForSQL(* #todo:

â¢ function to delete categories
â¢ selecting a category will display any child categories and a button to "Choose " & categoryName and another button to add a subcategory, if supported

*)