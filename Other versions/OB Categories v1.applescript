--OB Categories--	Created by: Nicholas Parsons--	Created on: 5/10/20----	Copyright © 2020 Nicholas Parsons, All Rights Reserved--use AppleScript version "2.4" -- Yosemite (10.10) or lateruse scripting additionsuse script "SQLite Lib2"use script "Myriad Tables Lib"use OBUtility : script "OB Utilities"property name : "OB Categories"property id : "com.OpenBooksApp.OBCategories"property version : "1.0"property primaryBaseForAccountCategoryIDs : 1000on displayCategories for thisDB given tableName:tableName as text, title:defaultTitle as text : "Categories", prompt:thePrompt as text : "Select a category.", editableColumns:editableColumns as list : {1}, columnHeader:columnHeader as text : "Category"	try		doOBLog of OBUtility for "displayCategories handler called from OB Categories library" given logType:"debug"		set headerRow to {columnHeader, "ID"}		set columnFormats to {text, missing value}		set parentCategoryID to missing value		repeat			try				repeat					try -- because the following line will throw an error if there are no and can be no subcategories of this parent category						set tableData to getAccounts from thisDB given parentCategoryID:parentCategoryID, tableName:tableName					on error errorMessage number 1000 -- this parent category can have no subcategories						doOBLog of OBUtility for errorMessage & " Error number 1000" given logType:"error"						display alert errorMessage						set parentCategoryID to parentCategory for parentCategoryID						set tableData to getAccounts from thisDB given parentCategoryID:parentCategoryID, tableName:tableName					end try					if parentCategoryID is missing value then						set itsTitle to defaultTitle						set cancelButtonName to "Done"					else						set itsTitle to defaultTitle & ": " & (categoryName for parentCategoryID given db:thisDB)						set cancelButtonName to "Back"					end if -- parentCategoryID is missing value					set theTable to make new table with data tableData with title itsTitle with prompt thePrompt column headings headerRow row template columnFormats editable columns editableColumns with empty selection allowed					modify table theTable OK button name "Select" cancel button name cancelButtonName extra button name "Add"										try						set theResult to display table theTable with extended results					on error number -128						if parentCategoryID is missing value then							doOBLog of OBUtility for "user cancelled" given logType:"debug"							error number -128						else							set parentCategoryID to parentCategory for parentCategoryID							exit repeat						end if -- parentCategoryID is missing value					end try										if button number of theResult is 2 then -- user chose add						doOBLog of OBUtility for "user chose to add new category" given logType:"debug"						try							promptUserForNewCategoryName for tableName given db:thisDB, parentCategoryID:parentCategoryID						on error errorMessage number errorNumber							doOBLog of OBUtility for errorMessage & " Error number " & errorNumber given logType:"error"							display alert "Sorry, we were unable to add your new category" message errorMessage						end try						-- go back to the main menu											else if button number of theResult is 1 then						-- #todo: process any edits to the category names						-- display the subcategories for the selected category						if values selected of theResult is {} then							display alert "Nothing was selected"						else -- a category was selected							doOBLog of OBUtility for "user chose " & the first item of the first item of values selected of theResult given logType:"debug"							set parentCategoryID to the last item of the first item of values selected of theResult						end if -- no category was selected					end if -- button selected				end repeat			on error number -128				exit repeat			end try		end repeat	on error errorMessage number errorNumber		doOBLog of OBUtility for errorMessage & " Error number " & errorNumber given logType:"error"		error errorMessage number errorNumber	end tryend displayCategorieson makeCategoriesTable for thisDB given tableName:tableName as text : "accounts"	doOBLog of OBUtility for "making new table for " & tableName given logType:"debug"	update db thisDB sql string "create table " & tableName & " (id integer primary key not null, name text not null, parent integer references " & tableName & "(id) on delete cascade)"end makeCategoriesTableon getAccounts from thisDB given parentCategoryID:parentCategoryID : missing value, tableName:tableName as text : "accounts"	doOBLog of OBUtility for "getting list of categories from " & tableName & " table where the parent category ID is " & parentCategoryID given logType:"debug"	(*
if parentCategoryID is missing value then we only want accounts whose id is divisible by 1000 with no remainder
otherwise we need to get accounts whose id is within the range beginning with the first subcategory number and ending with the last subcategory number and if divided by the x value would leave a remainder of 0
*)	if parentCategoryID is missing value then		set theData to query db thisDB sql string "select name, id from " & tableName & " where id %" & primaryBaseForAccountCategoryIDs & " = 0"	else		try -- because the following line might throw an error if there can be no subcategories for this parentCategoryID			set startValue to firstSubcategory for parentCategoryID		on error number 1000			error "Category “" & (categoryName for parentCategoryID given db:thisDB) & "” can have no subcategories as subcategories at this level are not supported." number 1000		end try		set {whoCares, x} to removeTrailingZeros from startValue		set endValue to startValue + (9 * x) - 1		set theData to query db thisDB sql string "select name, id from " & tableName & " where id between " & startValue & " and " & endValue & " and id % " & x & " = 0"	end if	if theData is {} then set theData to {{}}	return theDataend getAccountson listAllCategoryNames from thisTableName given db:thisDB	doOBLog of OBUtility for "getting list of all category names" given logType:"debug"	set theNames to query db thisDB sql string "select name from " & thisTableName & " order by name asc"	return theNamesend listAllCategoryNameson getNewPK for thisDB given parentCategoryID:parentCategoryID, tableName:tableName as text : "accounts"	-- first check whether there are any primary keys in the specified  category	-- and, if there are, get the largest one	doOBLog of OBUtility for "deriving a new category primary key ID in the " & tableName & " table where the parent category ID is " & parentCategoryID given logType:"debug"	if parentCategoryID is missing value then		-- there's no parent and the category is the top level category		set thePK to query db thisDB sql string "select max(id) from " & tableName & " where id %" & primaryBaseForAccountCategoryIDs & " = 0"		set thePK to the first item of the first item of thePK		if thePK is missing value then set thePK to 0		doOBLog of OBUtility for "the largest primary key within the specified category is " & thePK given logType:"debug"		set newPK to nextIDAtSameLevel for thePK	else -- where creating a subcategory		-- check to see whether there are any primary keys in this subcategory range and, if there are, get the largest		set startValue to firstSubcategory for parentCategoryID		set {whoCares, x} to removeTrailingZeros from startValue		set endValue to startValue + (9 * x) - 1		set thePK to query db thisDB sql string "select max(id) from " & tableName & " where id between " & startValue & " and " & endValue & " and id % " & x & " = 0"		set thePK to the first item of the first item of thePK		if thePK is missing value then -- this will be the first ID/subcategory in this category			set newPK to startValue		else -- some subcategories already exist and we want to get the next available ID within this subcategory range			set newPK to nextIDAtSameLevel for thePK		end if -- subcategories already exist	end if -- there's no parent category	doOBLog of OBUtility for "the new PK will be " & newPK given logType:"debug"	return newPKend getNewPKon promptUserForNewCategoryName for thisTableName as text : "accounts" given db:thisDB, parentCategoryID:parentCategoryID	doOBLog of OBUtility for "prompting user to add a new category to " & thisTableName & " where the parent category ID is " & parentCategoryID given logType:"debug"	set theResult to returnOBValue of OBUtility without backButton given prompt:"Enter the new category name.", title:"New Category"	if userCancelled of theResult then return false	set itsName to valueReturned of theResult	addCategory to thisDB for thisTableName given parentCategoryID:parentCategoryID, itsName:itsNameend promptUserForNewCategoryNameon addCategory to thisDB for thisTableName as text : "accounts" given parentCategoryID:parentCategoryID, itsName:itsName as text	doOBLog of OBUtility for "adding a new category called " & itsName & " to the " & thisTableName & " table with a parent category ID of " & parentCategoryID given logType:"debug"	set itsPK to getNewPK for thisDB given parentCategoryID:parentCategoryID	update db thisDB sql string "insert into " & thisTableName & " (id, name) values (" & itsPK & ", '" & itsName & "')"end addCategoryon nextIDAtSameLevel for n	doOBLog of OBUtility for "getting the next ID at the same level as " & n given logType:"debug"	set {n, x} to removeTrailingZeros from n	if (n as text) ends with "9" and x is not primaryBaseForAccountCategoryIDs then error "Unable to create another category at this level. It would exceed the number of subcategories supported at this level." number 1000	set n to n + 1	set n to n * x	doOBLog of OBUtility for "the next ID in the specified category will be " & n given logType:"debug"	return nend nextIDAtSameLevelon firstSubcategory for n	doOBLog of OBUtility for "getting the first subcategory ID for the parent category with ID of " & n given logType:"debug"	set {n, x} to removeTrailingZeros from n	if x = 1 then error "Unable to create a subcategory for ID " & n & ". It would exceed the number of levels of subcategories supported." number 1000	set n to (n * 10) + 1	set n to (n * x) / 10	return n as integerend firstSubcategoryon parentCategory for n	doOBLog of OBUtility for "getting the parent category of the subcategory with ID of " & n given logType:"debug"	set {itsParent, x} to removeTrailingZeros from n	if x = primaryBaseForAccountCategoryIDs then		set itsParent to missing value	else		set itsParent to (((characters 1 through -2 of (itsParent as text)) as text) as integer) * x * 10	end if	return itsParentend parentCategoryon removeTrailingZeros from n	doOBLog of OBUtility for "removing trailing zeros for " & n given logType:"debug"	set x to 1 -- to track how many zeros are removed from n	repeat while (n mod (x * 10)) = 0 and (x * 10) ≤ primaryBaseForAccountCategoryIDs		set x to x * 10	end repeat	return {(n / x) as integer, x}end removeTrailingZeroson categoryName for thisID given db:thisDB, tableName:tableName as text : "accounts"	doOBLog of OBUtility for "getting the name of the category whose ID is " & thisID given logType:"debug"	set theName to query db thisDB sql string "select name from " & tableName & " where id = " & thisID	if theName is {} then error "Could not find an account that had an ID of " & thisID & "." number 1000	return the first item of the first item of theNameend categoryName(* #todo:

• function to choose category which returns the name and ID of the chosen category
• selecting a category will display any child categories and a button to "Choose " & categoryName and another button to add a subcategory, if supported
• function to return all childless categories i.e. categories that do not have any child/subcategories. Useful e.g. in finance app to select relevant account for a transaction.
• how to get the ID of a category from its name (assuming unique category names)
• escape category names before adding to db
• possibly enforce unique category names

*)